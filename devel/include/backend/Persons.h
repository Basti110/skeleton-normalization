// Generated by gencpp from file backend/Persons.msg
// DO NOT EDIT!


#ifndef BACKEND_MESSAGE_PERSONS_H
#define BACKEND_MESSAGE_PERSONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <backend/Person.h>

namespace backend
{
template <class ContainerAllocator>
struct Persons_
{
  typedef Persons_<ContainerAllocator> Type;

  Persons_()
    : header()
    , persons()  {
    }
  Persons_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , persons(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::backend::Person_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::backend::Person_<ContainerAllocator> >::other >  _persons_type;
  _persons_type persons;





  typedef boost::shared_ptr< ::backend::Persons_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::backend::Persons_<ContainerAllocator> const> ConstPtr;

}; // struct Persons_

typedef ::backend::Persons_<std::allocator<void> > Persons;

typedef boost::shared_ptr< ::backend::Persons > PersonsPtr;
typedef boost::shared_ptr< ::backend::Persons const> PersonsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::backend::Persons_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::backend::Persons_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::backend::Persons_<ContainerAllocator1> & lhs, const ::backend::Persons_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.persons == rhs.persons;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::backend::Persons_<ContainerAllocator1> & lhs, const ::backend::Persons_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace backend

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::backend::Persons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::backend::Persons_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::backend::Persons_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::backend::Persons_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::backend::Persons_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::backend::Persons_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::backend::Persons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5b944881aa3cb9c1850cb3389c83c1e";
  }

  static const char* value(const ::backend::Persons_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5b944881aa3cb9cULL;
  static const uint64_t static_value2 = 0x1850cb3389c83c1eULL;
};

template<class ContainerAllocator>
struct DataType< ::backend::Persons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "backend/Persons";
  }

  static const char* value(const ::backend::Persons_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::backend::Persons_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The standard ROS message contains a header.\n"
"# There can be multiple people in a frame.\n"
"# Hence we created an array of a person.\n"
"# We should name this array as people.\n"
"# However, for me, while coding persons\n"
"# make much more sense as it resembles\n"
"# the data structure array.\n"
"Header header\n"
"Person[] persons \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: backend/Person\n"
"# A person has some body parts. That is why we have created\n"
"# an array of body parts.\n"
"int16 stationID\n"
"int16 sensorID\n"
"Bodypart[] bodyParts \n"
"\n"
"================================================================================\n"
"MSG: backend/Bodypart\n"
"# The location and score of body parts are stored in a float array.\n"
"# Therefore we are using 32 bits instead of 64 bits.\n"
"# src: https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/include/openpose/core/datum.hpp\n"
"float32 score\n"
"Pixel pixel\n"
"geometry_msgs/Point32 point \n"
"\n"
"================================================================================\n"
"MSG: backend/Pixel\n"
"# The location and score of body parts are stored in a float array.\n"
"# Therefore we are using 32 bits instead of 64 bits.\n"
"# src: https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/include/openpose/core/datum.hpp\n"
"# The location has been resized to the desired output\n"
"# resolution (e.g., `resolution` flag in the demo).\n"
"float32 x\n"
"float32 y \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::backend::Persons_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::backend::Persons_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.persons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Persons_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::backend::Persons_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::backend::Persons_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "persons[]" << std::endl;
    for (size_t i = 0; i < v.persons.size(); ++i)
    {
      s << indent << "  persons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::backend::Person_<ContainerAllocator> >::stream(s, indent + "    ", v.persons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BACKEND_MESSAGE_PERSONS_H
