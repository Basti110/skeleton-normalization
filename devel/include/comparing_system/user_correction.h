// Generated by gencpp from file comparing_system/user_correction.msg
// DO NOT EDIT!


#ifndef COMPARING_SYSTEM_MESSAGE_USER_CORRECTION_H
#define COMPARING_SYSTEM_MESSAGE_USER_CORRECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace comparing_system
{
template <class ContainerAllocator>
struct user_correction_
{
  typedef user_correction_<ContainerAllocator> Type;

  user_correction_()
    : user_id(0)
    , repetition(0)
    , positive_correction(false)
    , display_text()  {
    }
  user_correction_(const ContainerAllocator& _alloc)
    : user_id(0)
    , repetition(0)
    , positive_correction(false)
    , display_text(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _user_id_type;
  _user_id_type user_id;

   typedef int16_t _repetition_type;
  _repetition_type repetition;

   typedef uint8_t _positive_correction_type;
  _positive_correction_type positive_correction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _display_text_type;
  _display_text_type display_text;





  typedef boost::shared_ptr< ::comparing_system::user_correction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::comparing_system::user_correction_<ContainerAllocator> const> ConstPtr;

}; // struct user_correction_

typedef ::comparing_system::user_correction_<std::allocator<void> > user_correction;

typedef boost::shared_ptr< ::comparing_system::user_correction > user_correctionPtr;
typedef boost::shared_ptr< ::comparing_system::user_correction const> user_correctionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::comparing_system::user_correction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::comparing_system::user_correction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::comparing_system::user_correction_<ContainerAllocator1> & lhs, const ::comparing_system::user_correction_<ContainerAllocator2> & rhs)
{
  return lhs.user_id == rhs.user_id &&
    lhs.repetition == rhs.repetition &&
    lhs.positive_correction == rhs.positive_correction &&
    lhs.display_text == rhs.display_text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::comparing_system::user_correction_<ContainerAllocator1> & lhs, const ::comparing_system::user_correction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace comparing_system

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::comparing_system::user_correction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::comparing_system::user_correction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comparing_system::user_correction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::comparing_system::user_correction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comparing_system::user_correction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::comparing_system::user_correction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::comparing_system::user_correction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5faadefefb5d277a82a27faf3f41371";
  }

  static const char* value(const ::comparing_system::user_correction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5faadefefb5d277ULL;
  static const uint64_t static_value2 = 0xa82a27faf3f41371ULL;
};

template<class ContainerAllocator>
struct DataType< ::comparing_system::user_correction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "comparing_system/user_correction";
  }

  static const char* value(const ::comparing_system::user_correction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::comparing_system::user_correction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message describes user correction information\n"
"\n"
"# The following structure reflects the REST API between the Comparing System and the Smtartphone App \n"
"# as specified under https://app.getguru.com/card/iGK7zMAT/Tech-Spec-REST-API-ComparingSystem-Smartphone-App\n"
"#Â For questions, refer to Artur\n"
"\n"
"\n"
"int16 user_id\n"
"int16 repetition\n"
"bool positive_correction\n"
"string display_text\n"
;
  }

  static const char* value(const ::comparing_system::user_correction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::comparing_system::user_correction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.user_id);
      stream.next(m.repetition);
      stream.next(m.positive_correction);
      stream.next(m.display_text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct user_correction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::comparing_system::user_correction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::comparing_system::user_correction_<ContainerAllocator>& v)
  {
    s << indent << "user_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.user_id);
    s << indent << "repetition: ";
    Printer<int16_t>::stream(s, indent + "  ", v.repetition);
    s << indent << "positive_correction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.positive_correction);
    s << indent << "display_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.display_text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMPARING_SYSTEM_MESSAGE_USER_CORRECTION_H
