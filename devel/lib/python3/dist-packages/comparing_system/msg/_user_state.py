# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from comparing_system/user_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class user_state(genpy.Message):
  _md5sum = "0fabb7a9dd8f513916aacb089a33f4ba"
  _type = "comparing_system/user_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This message describes user correction information

# The following structure reflects the REST API between the Comparing System and the Smtartphone App 
# as specified under https://app.getguru.com/card/iGK7zMAT/Tech-Spec-REST-API-ComparingSystem-Smartphone-App
#Â For questions, refer to Artur


int16 user_id
string current_exercise_name
int16 repetitions
int16 seconds_since_last_exercise_start
int32 milliseconds_since_last_repetition
int8 repetition_score
int8 exercise_score
geometry_msgs/Point32 user_position


================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['user_id','current_exercise_name','repetitions','seconds_since_last_exercise_start','milliseconds_since_last_repetition','repetition_score','exercise_score','user_position']
  _slot_types = ['int16','string','int16','int16','int32','int8','int8','geometry_msgs/Point32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       user_id,current_exercise_name,repetitions,seconds_since_last_exercise_start,milliseconds_since_last_repetition,repetition_score,exercise_score,user_position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(user_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.user_id is None:
        self.user_id = 0
      if self.current_exercise_name is None:
        self.current_exercise_name = ''
      if self.repetitions is None:
        self.repetitions = 0
      if self.seconds_since_last_exercise_start is None:
        self.seconds_since_last_exercise_start = 0
      if self.milliseconds_since_last_repetition is None:
        self.milliseconds_since_last_repetition = 0
      if self.repetition_score is None:
        self.repetition_score = 0
      if self.exercise_score is None:
        self.exercise_score = 0
      if self.user_position is None:
        self.user_position = geometry_msgs.msg.Point32()
    else:
      self.user_id = 0
      self.current_exercise_name = ''
      self.repetitions = 0
      self.seconds_since_last_exercise_start = 0
      self.milliseconds_since_last_repetition = 0
      self.repetition_score = 0
      self.exercise_score = 0
      self.user_position = geometry_msgs.msg.Point32()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.user_id
      buff.write(_get_struct_h().pack(_x))
      _x = self.current_exercise_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hi2b3f().pack(_x.repetitions, _x.seconds_since_last_exercise_start, _x.milliseconds_since_last_repetition, _x.repetition_score, _x.exercise_score, _x.user_position.x, _x.user_position.y, _x.user_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.user_position is None:
        self.user_position = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 2
      (self.user_id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_exercise_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_exercise_name = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.repetitions, _x.seconds_since_last_exercise_start, _x.milliseconds_since_last_repetition, _x.repetition_score, _x.exercise_score, _x.user_position.x, _x.user_position.y, _x.user_position.z,) = _get_struct_2hi2b3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.user_id
      buff.write(_get_struct_h().pack(_x))
      _x = self.current_exercise_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2hi2b3f().pack(_x.repetitions, _x.seconds_since_last_exercise_start, _x.milliseconds_since_last_repetition, _x.repetition_score, _x.exercise_score, _x.user_position.x, _x.user_position.y, _x.user_position.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.user_position is None:
        self.user_position = geometry_msgs.msg.Point32()
      end = 0
      start = end
      end += 2
      (self.user_id,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_exercise_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_exercise_name = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.repetitions, _x.seconds_since_last_exercise_start, _x.milliseconds_since_last_repetition, _x.repetition_score, _x.exercise_score, _x.user_position.x, _x.user_position.y, _x.user_position.z,) = _get_struct_2hi2b3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2hi2b3f = None
def _get_struct_2hi2b3f():
    global _struct_2hi2b3f
    if _struct_2hi2b3f is None:
        _struct_2hi2b3f = struct.Struct("<2hi2b3f")
    return _struct_2hi2b3f
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
